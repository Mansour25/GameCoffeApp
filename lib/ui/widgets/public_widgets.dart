import 'package:coffe_play/core/AppData/AppColor.dart';import 'package:coffe_play/ui/screens/auth/signUp_screen.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';Widget space_h(double height) {  return SizedBox(    height: height,  );}Widget space_w(double width) {  return SizedBox(    width: width,  );}class CustomButton extends StatelessWidget {  Function()? function;  String title;  Color colorButton;  Color colorText;  CustomButton(this.function, this.title, this.colorButton, this.colorText);  @override  Widget build(BuildContext context) {    return GestureDetector(      onTap: function,      child: Container(        decoration: BoxDecoration(          color: colorButton,          borderRadius: BorderRadius.circular(8),        ),        width: 343.w,        height: 48.h,        child: Center(          child: Text(            title,            style: TextStyle(              fontSize: 14,              color: colorText,              fontWeight: FontWeight.w700,              fontFamily: 'NeoSans',            ),          ),        ),      ),    );  }}class CustomTitleAndTextField extends StatefulWidget {  String title;  String hint;  String iconPath;  TextEditingController controller;  TextInputType textInputType;  bool isPass;  CustomTitleAndTextField(    this.title,    this.hint,    this.controller,    this.iconPath,    this.textInputType,    this.isPass,  );  @override  State<CustomTitleAndTextField> createState() =>      CustomTitleAndTextFieldState();}class CustomTitleAndTextFieldState extends State<CustomTitleAndTextField> {  bool isVisibility = false;  IconData iconData = Icons.visibility_off;  change_visibility() {    setState(() {      if (isVisibility) {        isVisibility = false;        iconData = Icons.visibility;      } else {        isVisibility = true;        iconData = Icons.visibility_off;      }    });  }  @override  Widget build(BuildContext context) {    return Padding(      padding: EdgeInsets.only(        top: 24.h,      ),      child: SizedBox(          child: Column(        crossAxisAlignment: CrossAxisAlignment.start,        children: [          Text(            widget.title,            style: const TextStyle(              fontFamily: 'NeoSans',              color: Color(0xFF454545),              fontSize: 12,              fontWeight: FontWeight.w600,            ),          ),          space_h(12.h),          Container(            height: 50.h,            width: 343.w,            decoration: BoxDecoration(                color: const Color(0xFFf6f6f6),                borderRadius: BorderRadius.circular(8),                border: Border.all(                  color: Color(0xFFf6f6f6),                  width: 1,                )),            child: TextFormField(              obscureText: isVisibility,              keyboardType: widget.textInputType,              controller: widget.controller,              decoration: InputDecoration(                suffixIcon: widget.isPass                    ? IconButton(                        onPressed: () {                          change_visibility();                        },                        icon: Icon(iconData),                      )                    : null,                prefixIcon: Image.asset('assets/icons/${widget.iconPath}'),                focusedBorder: OutlineInputBorder(                  // حدود خارجية عندما يتم تحديد الحقل                  borderSide: BorderSide(color: AppColor.mainColorRed),                ),                border: const OutlineInputBorder(                  borderSide: BorderSide(                    color: Color(0xFFf6f6f6),                  ),                ),                hintText: widget.hint,                hintStyle: TextStyle(                  fontSize: 12,                  color: AppColor.colorHintTextField,                  fontFamily: 'NeoSans',                ),              ),            ),          ),        ],      )),    );  }}class CheckBoxAndTitle extends StatelessWidget {  final bool value;  final Function(bool?) onChanged;  String title;  CheckBoxAndTitle(this.onChanged, this.title, this.value);  @override  Widget build(BuildContext context) {    return Row(      children: [        Checkbox(          checkColor: Colors.white,          activeColor: AppColor.mainColorRed,          shape: RoundedRectangleBorder(            borderRadius: BorderRadius.circular(2),          ),          value: value,          onChanged: onChanged,        ),        Text(          title,          style: TextStyle(            fontFamily: 'NeoSans',            color: Color(0xFF454545),            fontSize: 12,            fontWeight: FontWeight.w700,          ),        ),      ],    );  }}class CustomText extends StatelessWidget {  String txt;  double size;  Color color;  FontWeight fontWeight;  CustomText(this.txt, this.size, this.color,      {this.fontWeight = FontWeight.w500});  @override  Widget build(BuildContext context) {    return Text(      txt,      style: TextStyle(        fontSize: size,        color: color,        fontFamily: 'NeoSans',        fontWeight: fontWeight,      ),    );  }}class CustomTextField extends StatelessWidget {  TextEditingController controller;  String hint;  Widget suffixIcon;  Widget prefixIcon;  Function() function;  FocusNode focusNode ;  CustomTextField(this.controller, this.hint, this.suffixIcon, this.prefixIcon, this.function,this  .focusNode);  @override  Widget build(BuildContext context) {    return Container(      height: 50.h,      width: 343.w,      decoration: BoxDecoration(          color: const Color(0xFFf6f6f6),          borderRadius: BorderRadius.circular(8),          border: Border.all(            color: Color(0xFFf6f6f6),            width: 1,          )),      child: TextFormField(        focusNode: focusNode,        onTap: function,        controller: controller,        decoration: InputDecoration(          suffixIcon: suffixIcon,          prefixIcon: prefixIcon,          focusedBorder: OutlineInputBorder(            // حدود خارجية عندما يتم تحديد الحقل            borderSide: BorderSide(color: AppColor.mainColorRed),          ),          border: const OutlineInputBorder(            borderSide: BorderSide(              color: Color(0xFFf6f6f6),            ),          ),          hintText: hint,          // label: Text(label),          hintStyle: TextStyle(            fontSize: 12,            color: AppColor.colorHintTextField,            fontFamily: 'NeoSans',          ),        ),      ),    );  }}void space_print(txt){  print('& & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &');  print('& & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &');  print(txt.toString());  print('& & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &');  print('& & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &');}