import 'dart:convert';import 'package:coffe_play/main.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:get/get.dart';class AppLocale {  Locale locale;  AppLocale(this.locale);  Map<String, String>? _loadedLocalizedValues;  static AppLocale of(BuildContext context) {    return Localizations.of<AppLocale>(context, AppLocale)!;  }  Future<void> loadLang() async {    String langFile = await rootBundle        .loadString('lib/localaization/locale/${locale.languageCode}.json');    Map<String, dynamic> _loadedValues = jsonDecode(langFile);    _loadedLocalizedValues =        _loadedValues.map((key, value) => MapEntry(key, value.toString()));  }  String? getTranslated(String key) {    return _loadedLocalizedValues?[key];  }  void changeLanguage(Locale newLocale) {loadLang();  }  static const LocalizationsDelegate<AppLocale> delegate = _AppLocalDelegate();}class _AppLocalDelegate extends LocalizationsDelegate<AppLocale> {  const _AppLocalDelegate();  @override  bool isSupported(Locale locale) {    return ["en", "ar"].contains(locale.languageCode);  }  @override  Future<AppLocale> load(Locale locale) async {    AppLocale appLocale = AppLocale(locale);    await appLocale.loadLang();    return appLocale;  }  @override  bool shouldReload(_AppLocalDelegate old) => false;}String getLang(BuildContext context, String key) {  return AppLocale.of(context).getTranslated(key) ?? key;}